#if __VERSION__ < 110
precision mediump float;
#endif
uniform sampler2D u_sampler;
uniform sampler2D u_sampler2;
uniform vec2 rubyInputSize;
uniform vec2 rubyOutputSize;
uniform vec2 rubyTextureSize;

#define inputGamma  2.4
#define outputGamma 2.2
#define TEX2D(c) pow(texture2D(u_sampler, (c)), vec4(inputGamma))

#if __VERSION__ >= 130
    in vec2 _texcoord;
    in vec2 _one;
    in float _mod_factor;

    out vec4 gl_FragColor;
#else
    varying vec2 _texcoord;
    varying vec2 _one;
    varying float _mod_factor;
#endif

vec4 scanlineWeights(float distance, vec4 color) {
    vec4 wid = 2.0 + 2.0 * pow(color, vec4(4.0));
    vec4 weights = vec4(distance / 0.3);
    return 1.4 * exp(-pow(weights * inversesqrt(0.5 * wid), wid)) / (0.6 + 0.2 * wid);
}

void main() {
    vec2 xy = _texcoord;
    vec2 ratio_scale = xy * rubyTextureSize - vec2(0.5);
    vec2 uv_ratio = fract(ratio_scale);
    xy.y = (floor(ratio_scale.y) + 0.5) / rubyTextureSize.y;
    //xy.x = (floor(ratio_scale.x) + 0.5) / rubyTextureSize.x;
    vec4 col  = TEX2D(xy);
    vec4 col2 = TEX2D(xy + vec2(0.0, _one.y));
    vec4 weights  = scanlineWeights(uv_ratio.y, col);
    vec4 weights2 = scanlineWeights(1.0 - uv_ratio.y, col2);
    vec3 mul_res  = (col * weights + col2 * weights2).rgb;
    vec3 dotMaskWeights = mix(vec3(1.0, 0.7, 1.0), vec3(0.7, 1.0, 0.7), floor(mod(_mod_factor, 2.0)));
    mul_res *= dotMaskWeights;
    gl_FragColor = vec4(pow(mul_res, vec3(1.0 / outputGamma)), 1.0);
    //gl_FragCoord.z = texture2D(u_sampler2, _texcoord).a;
}
